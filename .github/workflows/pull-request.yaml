name: Pull Request

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - np
      - main

jobs:
  test_pr:
    runs-on: ubuntu-latest
    environment: ${{ github.base_ref == "main" && "prod" || "np" }}

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout Git
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam:::role/github-oidc-role
          aws-region: "us-east-1"

      - name: Configure Workflow
        uses: ./.github/actions/configure
        with:
          artifactory-token: 

      - name: Unit Tests
        run: npm run test

      - name: Build
        run: npm run build

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive --diff
        continue-on-error: true

      - name: Terraform Init
        uses: bayer-int/terraform-action-init@v3
        id: init
        with:
          use_ssm: true # pulls, bucket name, region, kms_key_id, and locking table from ssm
          upload: false # Default, uploads the .terraform and .terraform.lock.hcl as artifacts
          state: terraform # The name of the statefile without the .tfstate extension
          s3_prefix: "tlp-backstage-template-poc/"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=environments/${{ github.base_ref == "main" && "prod" || "np" }}.tfvars -var=role=
        continue-on-error: true

      - uses: actions/github-script@v7
        env:
          PLAN: "terraform\n"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`\`
            #### Terraform Initialization ‚öôÔ∏è\`\`
            #### Terraform Validation ü§ñ\`\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @, Action: \`\`, Working Directory: \`\`, Workflow: \`\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
